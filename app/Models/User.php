<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Illuminate\Support\Facades\Storage; // Keep if you use Storage facade within the model, otherwise can be removed.

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'users'; // Explicitly define table name for clarity

    /**
     * The primary key for the model.
     *
     * @var string
     */
    protected $primaryKey = 'id_user'; // Custom primary key

    /**
     * The "type" of the primary key.
     *
     * @var string
     */
    protected $keyType = 'string'; // Assuming id_user is a string (e.g., 'USR25061234')

    /**
     * Indicates if the IDs are auto-incrementing.
     * Set to false because 'id_user' is generated by the application, not the database.
     *
     * @var bool
     */
    public $incrementing = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'id_user', // Keep if you might mass assign it (e.g., when an admin creates a user).
                   // If only generated in 'creating' event and never mass-assigned, can be removed.
        'name',
        'email',
        'password',
        'role',
        'status',
        'hp',
        'profile_photo_path',
        'google_avatar_url',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * The "booted" method of the model.
     * This method is called once per model when it's first booted.
     *
     * @return void
     */
    protected static function booted(): void
    {
        // Event listener 'creating' this will run JUST BEFORE a new user is saved.
        static::creating(function ($user) {
            // If id_user is not yet filled (e.g., during registration), create a new ID.
            if (empty($user->id_user)) {
                // Format: "USR" + Year (2 digits) + Month + 4 random digits
                // Example: USR25061234
                $user->id_user = 'USR' . date('ym') . mt_rand(1000, 9999);
            }
        });

        // Optional: Delete user's photo from storage when the user is deleted
        // static::deleting(function ($user) {
        //     if ($user->foto) {
        //         Storage::disk('public')->delete($user->foto);
        //     }
        // });
    }

    /**
     * Check if the user has an 'admin' role.
     *
     * @return bool
     */
    public function isAdmin(): bool
    {
        // Assuming 'role' column stores the user's role (e.g., 'admin', 'user', etc.)
        return $this->role === 'admin';
    }

    /**
     * Get the bookings made by the user.
     */
    public function bookings()
    {
        return $this->hasMany(Booking::class, 'id_user', 'id_user');
    }

    /**
     * Get the payments made by this user (as payer).
     */
    public function payments()
    {
        return $this->hasMany(Payment::class, 'payer_id', 'id_user'); // Assuming 'payer_id' references 'id_user'
    }

    public function confirmedBookings()
    {
        return $this->hasMany(Booking::class, 'confirmed_by', 'id_user');
    }

    public function rejectedBookings()
    {
        return $this->hasMany(Booking::class, 'rejected_by', 'id_user');
    }
}
